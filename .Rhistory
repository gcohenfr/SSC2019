# data.heatplot[is.na(data.heatplot)] <- min.p
# cor.data <- melt(cor(data.heatplot, use="p"))
# data.heatmap <- merge(merge(cor.data,protein.use,by.x="Var1",by.y="Peptide"),protein.use,by.x="Var2",by.y="Peptide")
# data.heatmap <- data.heatmap[order(data.heatmap$Protein.x),]
# data.heatmap <- data.heatmap[order(data.heatmap$Protein.y),]
# data.heatmap$Var1 <- factor(data.heatmap$Var1,levels=unique(data.heatmap$Var1),ordered=T)
# data.heatmap$Var2 <- factor(data.heatmap$Var2,levels=unique(data.heatmap$Var1),ordered=T)
# round(summary(subset(data.heatmap,Protein.x==Protein.y&Var2!=Var1)$value),3)
#
# library(ggplot2)
# library(reshape2)
# qplot(x=Var1, y=Var2, data=data.heatmap, fill=value, geom="tile") +
#   scale_fill_gradient2(limits=c(-1, 1))
#
# ggplot(data.heatmap,aes(Var1,Var2,fill=value)) +
#   geom_tile()+
#   scale_fill_gradient2(limits=c(-1, 1)) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#   ylab("Peptide") +
#   xlab("Protein")+ scale_x_discrete(breaks=data.heatmap$Var1,labels= data.heatmap$Protein.x)
#
# write.csv(data.heatmap,"Correlation matrix.csv")
#
# spanel.cor <- function(x, y, digits = 2, cex.cor, ...)
# {
#   usr <- par("usr"); on.exit(par(usr))
#   par(usr = c(0, 1, 0, 1))
#   # correlation coefficient
#   r <- cor(x, y,method="spearman",use="pairwise.complete.obs")
#   txt <- format(c(r, 0.123456789), digits = digits)[1]
#   txt <- paste("r= ", txt, sep = "")
#   text(0.5, 0.6, txt)
#
#   # p-value calculation
#   p <- cor.test(x, y,method="spearman",use="pairwise.complete.obs")$p.value
#   txt2 <- format(c(p, 0.123456789), digits = digits)[1]
#   txt2 <- paste("p= ", txt2, sep = "")
#   if(p<0.01) txt2 <- paste("p= ", "<0.01", sep = "")
#   text(0.5, 0.4, txt2)
# }
# panel.lmline = function (x, y, col = par("col"), bg = NA, pch = par("pch"),
#                          cex = 1, col.smooth = "red", ...)
# {
#   points(x, y, pch = pch, col = col, bg = bg, cex = cex)
#   ok <- is.finite(x) & is.finite(y)
#   if (any(ok))
#     abline(lm(y[ok] ~ x[ok]),
#            col = col.smooth, ...)
# }
# library(ReporteRs )
# mydoc = pptx(  )
# for(protein.plot in results$panel){
#   data.plot1 <- data.corplot[,colnames(data.corplot)%in%as.character(cor.plot.pept$Peptide[cor.plot.pept$Protein==protein.plot]),
#                              drop=F]
#   if(ncol(data.plot1)>1){
#     myplot.deepCV = function() {
#       pairs(data.plot1,upper.panel = panel.cor,lower.panel = panel.lmline)
#     }
#     mydoc = addSlide( mydoc, slide.layout = "Title and Content" ) %>%
#       addTitle(protein.plot) %>%
#       addPlot(fun=myplot.deepCV)
#
#   }
# }
# writeDoc( mydoc, file = paste(Method,ct,"correlation plot.pptx" ))
#
demograph<-read.csv("../../LIDACAD_reduced.csv", sep=",")
demograph$SampleID<-as.character(paste0("P",demograph$LABID))
demograph$PatientID<-as.character(paste0("P",demograph$LABID))
#data from Analysis.Main.R
patient_group<-subset(data,Group%in%Groups[[3]])
demograph<-merge(demograph,patient_group,by="PatientID")
dim(demograph)
summary(demograph[demograph$Group=="CAD(-)CVD(-)","AGE"])
summary(demograph[demograph$Group=="CAD(+)CVD(-)","AGE"])
tapply(demograph$AGE,demograph$Group,mean)
tapply(demograph$AGE,demograph$Group,sd)
summary(lm(AGE~Group,data=demograph))
summary(demograph[demograph$Group=="CAD(-)CVD(-)","PSEX"])
summary(demograph[demograph$Group=="CAD(+)CVD(-)","PSEX"])
tbl<-table(as.character(demograph$PSEX),demograph$Group)
chisq.test(tbl)
tbl
36/50
demograph[demograph$PatientID=="P292"]
demograph[demograph$PatientID==292]
demograph<-read.csv("../../LIDACAD_reduced.csv", sep=",")
demograph$SampleID<-as.character(paste0("P",demograph$LABID))
demograph$PatientID<-as.character(paste0("P",demograph$LABID))
load("/Users/gcohen/ownCloud/Research_Working/CAD_CVD/FullAnalysis/CVD RR ACC Conc data.RData")
data.cvd <- rbind(data.Plate1.rr,data.Plate2.rr,data.Plate3.rr)
splist <- strsplit2(data.cvd$SampleID,"_")
data.cvd$PatientID <- paste("P",splist[,1],sep="")
data.cvd$Group <- splist[,2]
data.cvd$Plate <- splist[,4]
changeLab <- read.delim("changeLabel.txt")
x<-rnorm(2,1)
x<-rnorm(2,10)
x<-rnorm(2,1)
y<-rnorm(2,10)
plot(x,y)
x<-rnorm(1000,2,1)
y<-rnorm(1000,2,10)
plot(x,y)
xs<-scale(x)
ys<-scale(y)
plot(xs,ys)
data("iris")
head(iris)
length.tall<-iris %>% select(Sepal.Length,Species)
library(dplyr)
length.tall<-iris %>% select(Sepal.Length,Species)
cor(length.tall$Sepal.Length)
library(reshape2)
length.wide<-cast(length.tall)
length.wide<-cast(length.tall,id~Species)
library(reshape)
install.packages("reshape")
library(reshape)
length.wide<-cast(length.tall,id~Species)
length.wide<-cast(length.tall)
length.wide<-cast(length.tall,Species~Sepal.length)
length.wide<-cast(length.tall,Species~Sepal.Length)
length.wide<-cast(length.tall,Sepal.Length~Species)
length.wide<-dcast(length.tall,Species~Sepal.length)
length.wide<-dcast(length.tall,Species~Sepal.Length)
View(length.wide)
length.wide<-dcast(length.tall,Sepal.Length~Species)
length.wide<-dcast(length.tall,.~Species)
length.wide<-dcast(length.tall,Sepal.Length~.)
length.wide<-melt(length.tall,id="Species")
View(length.tall)
library(tidyr)
dat.w<-spread(length.tall,key=Species)
dat.w<-spread(length.tall,key=Species,value=Sepal.Length)
dat.w<-spread(length.tall,Species,Sepal.Length)
rep(1:50,each=50)
rep(1:50,3)
length.tall$id<-rep(1:50,3)
dat.w<-spread(length.tall,key=Species,value=Sepal.Length)
View(dat.w)
cor(dat.w[,-1])
M<-matrix(rnorm(20),nrow=10,ncol=2)
M
X<-M
M<-t(X)%*%X
dim(M)
X<-cbind(1,X)
M<-t(X)%*%X
dim(M)
y<-rnorm(10)
b_ls<-solve(M)%*%t(X)%*%y
b_ls
dat.example<-data.frame(y=y,x1=X[,2],x2=X[,3])
head(dat.example)
summary(lm(y~x1+x2,data=dat.example))
b_ls
dat.example<-data.frame(y=y,x1=X[,2],x2=X[,3],x3=X[,2]+X[,3])
summary(lm(y~x1+x2+x3,data=dat.example))
M<-t(X)%*%X
solve(M)
X2<-cbind(X,dat.example$x3)
M2<-t(X2)%*%X2
solve(M2)
dat.example<-data.frame(y=y,x1=X[,2],x2=X[,3],x3=X[,2]+X[,3]+rnorm(10,0,.001))
head(dat.example,2)
-0.2357004-0.3802265
summary(lm(y~x1+x2+x3,data=dat.example))
dat.example<-data.frame(y=y,x1=X[,2],x2=X[,3],x3=X[,2]+X[,3]+rnorm(10,0,.1))
summary(lm(y~x1+x2+x3,data=dat.example))
summary(lm(y~x1+x2,data=dat.example))$coeff
summary(lm(x3~x1+x2,data=dat.example))$coeff
summary(lm(x3~x1+x2,data=dat.example))
1/.02
install.packages(c("backports", "BH", "bindr", "bindrcpp", "boot", "broom", "callr", "car", "caret", "clipr", "cluster", "cowplot", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "dplyr", "estimability", "forcats", "foreach", "foreign", "gdtools", "ggjoy", "ggridges", "git2r", "glmnet", "glue", "gridExtra", "gtools", "haven", "highr", "hms", "httpuv", "iterators", "kableExtra", "knitr", "lazyeval", "lme4", "lsmeans", "lubridate", "MASS", "Matrix", "mgcv", "modelr", "munsell", "mvtnorm", "officer", "openssl", "packrat", "pcaPP", "pense", "PKI", "plogr", "psych", "purrr", "quantreg", "R.oo", "R.utils", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readxl", "ReporteRs", "ReporteRsjars", "reprex", "reshape2", "rJava", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "rrcov", "rsconnect", "rvg", "scales", "selectr", "shiny", "sourcetools", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "withr", "xlsx", "xml2", "yaml", "zoo"))
n <- 10000
set.seed(32473059)
data.raw <- data.frame(y=c(rep(0,n),rep(1,n)),
+            x1=c(rnorm(n,0,1),rnorm(n,1,1)))
data.raw$x2 <- data.raw$x1 + rnorm(n, 0,0.1)
fit1 <- glm(y~x1, data.raw, family=binomial)
fit2 <- glm(y~x1+x2, data.raw, family=binomial)
with(data.raw, cor(x1,x2))
data.raw <- data.frame(y=c(rep(0,n),rep(1,n)),
x1=c(rnorm(n,0,1),rnorm(n,1,1)))
data.raw$x2 <- data.raw$x1 + rnorm(n, 0,0.1)
fit1 <- glm(y~x1, data.raw, family=binomial)
fit2 <- glm(y~x1+x2, data.raw, family=binomial)
with(data.raw, cor(x1,x2))
cov(cbind(x1,x2))
with(data.raw,cov(cbind(x1,x2)))
M<-with(data.raw,cov(cbind(x1,x2)))
rank(M)
det(M)
solve(M)
summary(fit1)
summary(fit2)
auc(y=data.raw$y,predict(fit1))
library(ROCR)
auc(y=data.raw$y,predict(fit1))
install.packages("AUC")
auc(y=data.raw$y,predict(fit1))
library(AUC)
auc(y=data.raw$y,predict(fit1))
?auc
library(MASS)
?auc
library(glmnet)
auc(y=data.raw$y,predict(fit1))
n <- 10000
set.seed(32473059)
data.raw <- data.frame(y=c(rep(0,n),rep(1,n)),
x1=c(rnorm(n,0,1),rnorm(n,1,1)))
data.raw$x2 <- data.raw$x1 + rnorm(n, 0,0.1)
fit1 <- glm(y~x1, data.raw, family=binomial)
fit2 <- glm(y~x1+x2, data.raw, family=binomial)
with(data.raw, cor(x1,x2))
auc(y=data.raw$y,predict(fit1))
#[1] 0.7624636
auc(y=data.raw$y,predict(fit2))
N<-100
set.seed(32473059)
data.raw <- data.frame(y=c(rep(0,n),rep(1,n)),
x1=c(rnorm(n,0,1),rnorm(n,1,1)))
data.raw$x2 <- data.raw$x1 + rnorm(n, 0,0.1)
with(data.raw, cor(x1,x2))
n <- 100
set.seed(32473059)
data.raw <- data.frame(y=c(rep(0,n),rep(1,n)),
x1=c(rnorm(n,0,1),rnorm(n,1,1)))
data.raw$x2 <- data.raw$x1 + rnorm(n, 0,0.1)
with(data.raw, cor(x1,x2))
auc(y=data.raw$y,predict(fit1))
#[1] 0.7624636
auc(y=data.raw$y,predict(fit2))
fit1 <- glm(y~x1, data.raw, family=binomial)
fit2 <- glm(y~x1+x2, data.raw, family=binomial)
auc(y=data.raw$y,predict(fit1))
#[1] 0.7624636
auc(y=data.raw$y,predict(fit2))
summary(fit1)
?rlnorm
dat<-rlnorm(100,4,1)
hist(dat)
log(3.82,10)
log(.89,10)
dat<-rlnorm(100,.6,-0.5)
dat<-rlnorm(100,4,1)
hist(log(dat,10))
dat<-rlnorm(100,3.82,.89)
hist(log(dat,10))
10^3.82
10^.89
dat<-rlnorm(100,6607,8)
hist(log(dat,10))
summary(dat)
dat<-rlnorm(1000,4,1)
hist(log(dat,10))
dat<-rlnorm(100000,4,1)
hist(log(dat,10))
summary(dat)
summary(log(dat,10))
dat<-rlnorm(100,4,1)
var.fn<-function(x,dat){
v<-log(abs((mean(dat)-median(dat))/median(dat)))
v
}
sample(1,1:10)
sample(1,1:10)
sample(1:10)
sample(1:10,1)
sample(1:10,1)
sample(1:10,1)
sample(1:10,1)
var.fn<-function(a,X){
n<-length(X)
X[sample(1:n,1)]<-a
v<-log(abs((mean(X)-median(X))/median(X)))
v
}
var.fn(0,dat)
mean(dat)
median(dat)
X<-dat
n<-length(X)
X[sample(1:n,40)]<-a
X[sample(1:n,40)]<-0.01
mean(X)
median(X)
X<-dat
order(X)
X[66]
X[19]
X[80]
X[order(X)[1:40]]<-0.01
median(X)
mean(X)
X[order(X)[1:40]]<-10000
mean(X)
X[order(X)[1:40]]<-2000
mean(X)
X<-dat
X[order(X)[1:40]]<-2000
mean(X)
median(X)
X<-dat
X[order(X)[60:100]]<-2000
median(X)
mean(X)
var.fn(2000,dat)
X<-dat
X[order(X)[1:40]]<-0
median(X)
mean(X)
dat<-rlnorm(100,4,1)
dat<-rlnorm(15,4,1)
dat
mean(dat)
median(dat)
X[order(X)[1:5]]<-0.01
X<-dat
X[order(X)[1:5]]<-0.01
mean(X)
median(X)
X[order(X)[1:7]]<-0.01
mean(X)
median(X)
log(abs((mean(X)-median(X))/median(X)),10)
abs((mean(X)-median(X))
)
mean(X)
median(X)
mean(X)-median(X)
(mean(X)-median(X))/median(X)
X<-dat
X[order(X)[1:7]]<-0.01
mean(X)
median(X)
abs(mean(X)-median(X))
set.seed(1234)
set.seed(1234)
dat<-rlnorm(15,4,1)
X<-dat
mean(X)
median(X)
X[order(X)[1:7]]<-0.01
abs(mean(X)-median(X))
mean(X)
var.fn<-function(x,a){
v<-log(abs((mean(x)-a)/a),10)
v
}
set.seed(1234)
dat<-rlnorm(10000,4,1)
median(dat)
y<-var.fn(dat,median(dat))
plot(dat,y)
y
var.fn<-function(x,a){
v<-log(abs((x-a)/a),10)
v
}
summary(dat)
y<-var.fn(seq(0:2000,.1),median(dat))
y<-var.fn(seq(0,2000,.1),median(dat))
set.seed(1234)
dat<-rlnorm(10000,4,1)
x<-seq(0,2000,.1)
y<-var.fn(x,median(dat))
plot(dat,y)
length(x)
head(x)
plot(x,y)
median(dat)
y<-var.fn(x,2)
dat.plot<-data.frame(x,y)
ggplot(x,y)
library(ggplot2)
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()
y<-var.fn(x,100)
dat.plot<-data.frame(x,y)
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()+geom_vline(xintercept = 100,linetype="dashed",color="red")
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()+geom_vline(xintercept = 100,linetype="dashed",color="red")+
geom_vline(xintercept = 0,linetype="dashed",color="grey")+
geom_vline(xintercept = 200,linetype="dashed",color="grey")+
geom_hline(yintercept = 0)
set.seed(1234)
#dat<-rlnorm(10000,4,1)
x<-seq(0,2000,.01)
y<-var.fn(x,100)
dat.plot<-data.frame(x,y)
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()+geom_vline(xintercept = 100,linetype="dashed",color="red")+
geom_vline(xintercept = 0,linetype="dashed",color="grey")+
geom_vline(xintercept = 200,linetype="dashed",color="grey")+
geom_hline(yintercept = 0)
#dat<-rlnorm(10000,4,1)
x<-seq(0,2000,.001)
y<-var.fn(x,100)
dat.plot<-data.frame(x,y)
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()+geom_vline(xintercept = 100,linetype="dashed",color="red")+
geom_vline(xintercept = 0,linetype="dashed",color="grey")+
geom_vline(xintercept = 200,linetype="dashed",color="grey")+
geom_hline(yintercept = 0)
x<-seq(0,2000,.0001)
#y<-var.fn(x,median(dat))
library(ggplot2)
y<-var.fn(x,100)
dat.plot<-data.frame(x,y)
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()+geom_vline(xintercept = 100,linetype="dashed",color="red")+
geom_vline(xintercept = 0,linetype="dashed",color="grey")+
geom_vline(xintercept = 200,linetype="dashed",color="grey")+
geom_hline(yintercept = 0)
set.seed(1234)
#dat<-rlnorm(10000,4,1)
x<-seq(0,100,.0001)
#y<-var.fn(x,median(dat))
library(ggplot2)
y<-var.fn(x,10)
dat.plot<-data.frame(x,y)
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()+geom_vline(xintercept = 100,linetype="dashed",color="red")+
geom_vline(xintercept = 0,linetype="dashed",color="grey")+
geom_vline(xintercept = 200,linetype="dashed",color="grey")+
geom_hline(yintercept = 0)
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()+geom_vline(xintercept = 10,linetype="dashed",color="red")+
geom_vline(xintercept = 0,linetype="dashed",color="grey")+
geom_vline(xintercept = 20,linetype="dashed",color="grey")+
geom_hline(yintercept = 0)
y<-var.fn(x,1)
dat.plot<-data.frame(x,y)
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()+geom_vline(xintercept = 1,linetype="dashed",color="red")+
geom_vline(xintercept = 0,linetype="dashed",color="grey")+
geom_vline(xintercept = 2,linetype="dashed",color="grey")+
geom_hline(yintercept = 0)
y<-var.fn(x,25)
dat.plot<-data.frame(x,y)
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()+geom_vline(xintercept = 25,linetype="dashed",color="red")+
geom_vline(xintercept = 0,linetype="dashed",color="grey")+
geom_vline(xintercept = 50,linetype="dashed",color="grey")+
geom_hline(yintercept = 0)
x<-seq(0,100,.00001)
#y<-var.fn(x,median(dat))
library(ggplot2)
y<-var.fn(x,25)
dat.plot<-data.frame(x,y)
ggplot(data=dat.plot, aes(x=x, y=y)) +
geom_line()+geom_vline(xintercept = 25,linetype="dashed",color="red")+
geom_vline(xintercept = 0,linetype="dashed",color="grey")+
geom_vline(xintercept = 50,linetype="dashed",color="grey")+
geom_hline(yintercept = 0)
remotes::install_github('yihui/xaringan')
install.packages("remotes")
remotes::install_github('yihui/xaringan')
install.packages("digest")
install.packages('IRkernel')
IRkernel::installspec()
install.packages('IRkernel')
.libPaths()
R.home()
install.packages('IRkernel')
.libPaths()
library(IRkernel)
install.packages("broom")
install.packages('pbdZMQ')
install.packages("pbdZMQ")
install.packages("pbdZMQ")
install.packages("pbdZMQ")
q()
xaringan::inf_mr()
getwd()
setwd("~/Documents/GitRepos/STAT540_RMarkdown_Slides")
xaringan::inf_mr("L5_TwoGroupComp.Rmd")
xaringan::inf_mr()
remotes::install_github('yihui/xaringan', upgrade = TRUE)
knit_with_parameters('~/Documents/GitRepos/STAT540_RMarkdown_Slides/L5_TwoGroupComp.Rmd')
xaringan::inf_mr()
setwd("~/ownCloud/Seminars and Conferences/SSC2019")
xaringan::inf_mr(moon="S450_550_model.Rmd")
getwd()
remotes::install_github('yihui/xaringan')
install.packages("remotes")
remotes::install_github('yihui/xaringan')
remotes::install_github('yihui/xaringan')
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
